const { jsPDF } = require("jspdf"); // will automatically load the node version
const { autoTable } = require("jspdf-autotable");

exports.SavePDF = async () => {
  try {
    doc = new jsPDF();
    var pageHeight = doc.internal.pageSize.height;
    var pageWidth = doc.internal.pageSize.width;

    var x = 0;
    var y = 0;
    doc.setTextColor(200);
    doc.text("Hello world!", 10, 10);
    for (var i = 0; i < 20; i++) {
      doc.setTextColor(100);
      doc.setFontSize(10);
      x = x + 10;
      y = y + 10;
      doc.text("Hello world!", x, y);
    }
    doc.addPage();
    x = 0;
    y = 0;
    doc.setTextColor(1);
    for (var i = 0; i < 20; i++) {
      x = x + 10;
      y = y + 10;
      doc.text("Hello world!", x, y);
    }
    doc = examples.spans(doc);

    doc.save("c:\\SAR\\a4.pdf");
    console.log("end SavePDF");
    //const pdfBytes = await doc.save();
  } catch (err) {
    console.log(err);
    return err;
  }
};

/*
 |--------------------------------------------------------------------------
 | This file contains examples of how to use this plugin
 |--------------------------------------------------------------------------
 |
 | To see what the documents generated by these examples looks like you can open
 | ´examples.html´ or go to http://simonbengtsson.github.io/jsPDF-AutoTable.
 |
 | To make it possible to view each example in examples.html some extra code
 | is added to the examples below. For example they return their jspdf
 | doc instance and gets generated data from the library faker.js. See simple.html
 | for a minimal example.
 */

/*  var faker = window.faker */

var examples = {};
/*
  |--------------------------------------------------------------------------
  | Below is some helper functions for the examples
  |--------------------------------------------------------------------------
  */
// Col spans and row spans
examples.spans = function (doc) {
  //var doc = new jsPDF('p', 'pt')
  doc.text("Rowspan and colspan", 40, 50);

  var raw = bodyRows(40);
  var body = [];

  for (var i = 0; i < raw.length; i++) {
    var row = [];
    for (var key in raw[i]) {
      row.push(raw[i][key]);
    }
    if (i % 5 === 0) {
      row.unshift({
        rowSpan: 5,
        content: i / 5 + 1,
        styles: { valign: "middle", halign: "center" },
      });
    }
    body.push(row);
    //console.log(row);
  }

  doc.autoTable({
    startY: 60,
    head: [
      [
        {
          content: "People",
          colSpan: 5,
          styles: { halign: "center", fillColor: [22, 160, 133] },
        },
      ],
    ],
    body: body,
    theme: "grid",
  });
  doc.autoTable({
    styles: { fillColor: [255, 0, 0] },
    columnStyles: { 0: { halign: "center", fillColor: [0, 255, 0] } }, // Cells in first column centered and green
    margin: { top: 10 },
    body: [
      ["Sweden", "Japan", "Canada"],
      ["Norway", "China", "USA"],
      ["Denmark", "China", "Mexico"],
    ],
  });

  // Example usage of columns property. Note that America will not be included even though it exist in the body since there is no column specified for it.
  doc.autoTable({
    columnStyles: { europe: { halign: "center" } }, // European countries centered
    body: [
      { europe: "Sweden", america: "Canada", asia: "China" },
      { europe: "Norway", america: "Mexico", asia: "Japan" },
    ],
    columns: [
      { header: "Europe", dataKey: "europe" },
      { header: "Asia", dataKey: "asia" },
    ],
  });
  doc.autoTable({
    body: [
      [
        {
          content: "Text",
          colSpan: 2,
          rowSpan: 2,
          styles: { halign: "center" },
        },
      ],
    ],
  });
  return doc;
};

function headRows() {
  return [
    { id: "ID", name: "Name", email: "Email", city: "City", expenses: "Sum" },
  ];
}

function footRows() {
  return [
    { id: "ID", name: "Name", email: "Email", city: "City", expenses: "Sum" },
  ];
}

function columns() {
  return [
    { header: "ID", dataKey: "id" },
    { header: "Name", dataKey: "name" },
    { header: "Email", dataKey: "email" },
    { header: "City", dataKey: "city" },
    { header: "Exp", dataKey: "expenses" },
  ];
}

function data(rowCount) {
  rowCount = rowCount || 10;
  var body = [];
  for (var j = 1; j <= rowCount; j++) {
    body.push({
      id: j,
      name: j + 1,
      email: j + 2,
      city: j + 3,
      expenses: j + 4,
    });
  }
  return body;
}

function bodyRows(rowCount) {
  rowCount = rowCount || 10;
  var body = [];
  for (var j = 1; j <= rowCount; j++) {
    body.push({
      id: j,
      name: j + 5,
      email: j + 6,
      city: j + 7,
      expenses: j + 8,
    });
  }
  return body;
}
